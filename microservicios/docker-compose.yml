services:
  # Inventario Service - Port 8081
  inventario:
    build: ./inventario
    container_name: cloud2-api-inventario
    ports:
      - "8081:8081"
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-duoc}
      DB_USER: ${DB_USER:-duoc}
      DB_PASS: ${DB_PASS:-84oL4mK6cM8w7SK}
    restart: always
    networks:
      - vet-network
    depends_on:
      postgres:
        condition: service_healthy

  # Historial Service - Port 8082
  historial:
    build: ./historial
    container_name: cloud2-api-historial
    ports:
      - "8082:8082"
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-duoc}
      DB_USER: ${DB_USER:-duoc}
      DB_PASS: ${DB_PASS:-84oL4mK6cM8w7SK}
    restart: always
    networks:
      - vet-network
    depends_on:
      postgres:
        condition: service_healthy

  # Agenda Service - Port 8083
  agenda:
    build: ./agenda
    container_name: cloud2-api-agenda
    ports:
      - "8083:8083"
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-duoc}
      DB_USER: ${DB_USER:-duoc}
      DB_PASS: ${DB_PASS:-84oL4mK6cM8w7SK}
    restart: always
    networks:
      - vet-network
    depends_on:
      postgres:
        condition: service_healthy

  # Empleados Service - Port 8084
  empleados:
    build: ./empleados
    container_name: cloud2-api-empleado
    ports:
      - "8084:8084"
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-duoc}
      DB_USER: ${DB_USER:-duoc}
      DB_PASS: ${DB_PASS:-84oL4mK6cM8w7SK}
    restart: always
    networks:
      - vet-network
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17
    container_name: cloud2-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: duoc
      POSTGRES_PASSWORD: 84oL4mK6cM8w7SK
      POSTGRES_DB: duoc
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./esquema.sql:/docker-entrypoint-initdb.d/esquema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - vet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U duoc -d duoc"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

networks:
  vet-network:
    driver: bridge
